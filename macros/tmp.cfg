
[gcode_macro PROGRESSIVE_HEATUP]
gcode:
  {% set start = params.START | float %}
  {% set end = params.END | float %}
  {% set time = params.TIME | int %}
  {% set heater_name = "extruder" %}


  {% set temp_range = end - start %}
  {% set per_minute = temp_range / time %}
  {% set current_temperature = start %}

  {action_respond_info("Start: %.1f" % (start))}  
  {action_respond_info("Range: %.1f" % (temp_range))}
  {action_respond_info("Per Minute: %.1f" % (per_minute))}

  SET_HEATER_TEMPERATURE HEATER={heater_name} TARGET={start}
  TEMPERATURE_WAIT SENSOR={heater_name} MINIMUM={start}
  
  {% for i in range(time) %}
    {% set new_target = start+per_minute*(i+1) %}
    SET_HEATER_TEMPERATURE HEATER={heater_name} TARGET={new_target}    
    G4 P{60000}
  {% endfor %}
  M117 done!!

[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro TEST]
gcode:
  G28 XY
  Attach_Probe_Lock
  G28 Z
  Z_TILT_ADJUST
  CALIBRATE_Z
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE PROFILE="default"
  Dock_Probe_Unlock


[gcode_macro OFFSET]
gcode:
  G28 XY
  Attach_Probe_Lock
  WIPE_NOZZLE
  G28 Z
  WIPE_NOZZLE
  CALIBRATE_Z
  Dock_Probe_Unlock


[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
