[gcode_macro MAINTENANCE]
gcode:
    STOP_LED_EFFECTS
    SET_LED LED=enclosure RED=0 GREEN=0 BLUE=0 white=1
  {% if printer.toolhead.homed_axes != "xy" and printer.toolhead.homed_axes != "xyz" %}
    M117 Homing XYZ
    G28
  {% endif %}
  G0 X125 Y150 Z200 F30000


# LOW_TEMP_CHECK checks if there is a setpoint for the extruder.
# - If this setpoint is reached, continue. 
# - If not, heat to setpoint.
# - If no setpoint, heat to parameter T (default@200)
[gcode_macro LOW_TEMP_CHECK]
gcode: 
    {% set T = params.T|int|default(220) %}

    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            M117 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T %}  # heat to T.
            M117 No setpoint, heating to {T}.
            M109 S{T}
        {% endif %}
    {% endif %}


[gcode_macro Save_Pressure_Advance]
# call this in your print start gcode after setting PA for the print
# (only necessary if the slicer inserts ramming gcode that sets PA to 0)
description: Save the current pressure advance value
# don't change any of the variables below this line
variable_pa: -1
gcode:
    # save PA if it is not 0
    {% set pa = printer.extruder.pressure_advance %}
    {% if pa > 0 %}
        SET_GCODE_VARIABLE MACRO=Save_Pressure_Advance VARIABLE=pa VALUE={pa}
    {% endif %}

[gcode_macro Restore_Pressure_Advance]
description: Restore saved pressure advance value
gcode:
    # restore PA if a previous value was saved
    {% if not (printer["gcode_macro Save_Pressure_Advance"].pa == -1) %}
        SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro Save_Pressure_Advance"].pa}
    {% endif %}

[gcode_macro LUBRICATE_Z]
gcode:
  G28
  Z_TILT_ADJUST
  CALIBRATE_Z
  {% for i in range(5) %}
  G1 Z0 F3000
  G1 Z{printer.toolhead.axis_maximum.z} F3000
  {% endfor %}
  G1 Z{printer.toolhead.axis_maximum.z/2} F3000


[gcode_macro LUBRICATE_GANTRY]
gcode:
  G28
  G1 Z100 F3000

  {% for i in range(5) %}
  G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y} F30000
  G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F30000
  {% endfor %}
  G1 X{(printer.toolhead.axis_maximum.x-printer.toolhead.axis_minimum.x)/2} Y{(printer.toolhead.axis_maximum.y-printer.toolhead.axis_minimum.y)/2} F30000



[gcode_macro DOCK_TEST]
gcode:
  G28
  G0 Z150
  {% for i in range(5) %}
  ATTACH_PROBE
  G1 X125 Y125 F18000
  DOCK_PROBE
  G1 X125 Y125 F18000
  {% endfor %}


[gcode_shell_command belt_graph]
command: bash /opt/config/scripts/belt_graph.sh
timeout: 500.0
verbose: True

[gcode_shell_command shaper_graph]
command: bash /opt/config/scripts/shaper_graph.sh
timeout: 500.0
verbose: True

[gcode_shell_command clean_tmp]
command: bash /opt/config/scripts/clean_tmp.sh
timeout: 500.0
verbose: True

[gcode_macro BELT_TEST]
gcode:
    SET_LED LED=enclosure white=1
    G28
    RUN_SHELL_COMMAND CMD=clean_tmp
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START=5 FREQ_END=133.33 HZ_PER_SEC=1
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START=5 FREQ_END=133.33 HZ_PER_SEC=1
    RUN_SHELL_COMMAND CMD=belt_graph


[gcode_macro SHAPER_TEST]
gcode:
    SET_LED LED=enclosure white=1
    G28
    RUN_SHELL_COMMAND CMD=clean_tmp
    TEST_RESONANCES AXIS=X
    TEST_RESONANCES AXIS=Y
    RUN_SHELL_COMMAND CMD=shaper_graph